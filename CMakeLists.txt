cmake_minimum_required(VERSION 3.31)
project(Vitruve)

option(BUILD_TESTING "Build the unit tests" ON)

include(CheckIPOSupported)
include(GNUInstallDirs)
include(cmake/tests.cmake)
include(cmake/find_linker.cmake)
include(cmake/CompileShaders.cmake)
include(cmake/StripDebugFile.cmake)
include(cmake/disable_rtti.cmake)
include(cmake/generate_header.cmake)

# Option to force colored output of the compiler
option(VIT_FORCE_COLORED_OUTPUT "Always produce ANSI-colored output (GNU/Clang only)." TRUE)
if(VIT_FORCE_COLORED_OUTPUT)
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        add_compile_options(-fdiagnostics-color=always)
    elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
        add_compile_options(-fcolor-diagnostics)
    endif()
endif()

option(VIT_ENABLE_ASAN "Enable AddressSanitizer" OFF)
if(VIT_ENABLE_ASAN)
    add_compile_options(-fsanitize=address)
    add_link_options(-fsanitize=address)
endif(VIT_ENABLE_ASAN)

find_linker()

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

check_ipo_supported(RESULT supported)
if(supported)
    message(STATUS "LTO enabled")
    cmake_policy(SET CMP0069 NEW)
    set(CMAKE_POLICY_DEFAULT_CMP0069 NEW)
    set_property(GLOBAL PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
else()
    message(STATUS "LTO not supported")
endif()

option(OPTIMIZE_FOR_NATIVE "Build with -march=native" OFF)
if(OPTIMIZE_FOR_NATIVE)
    message(STATUS "Building with -march=native")
    if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message(WARNING "Native optimization is not supported for MSVC")
        set(OPTIMIZE_FOR_NATIVE OFF)
    endif()
else()
    message(STATUS "Building without -march=native")
endif()

option(VIT_BUILD_DOCUMENTATION "Build the Doxygen documentation" OFF)
if(VIT_BUILD_DOCUMENTATION)
    message(STATUS "Documentation building using Doxygen enabled")
    find_package(Doxygen)
    if(DOXYGEN_FOUND)
        set(DOXYGEN_USE_MDFILE_AS_MAINPAGE README.md)
        set(DOXYGEN_WARN_LOGFILE ${CMAKE_BINARY_DIR}/doxygen-warnings.log)
        set(DOXYGEN_PREDEFINED DOXYGEN_SHOULD_SKIP_THIS)
        doxygen_add_docs(doc Engine/src/ RHI/Vulkan/src/ README.md)
    else()
        message(SEND_ERROR "Doxygen needs to be installed to build the documentation")
    endif()
endif()

option(VIT_ENABLE_PROFILING "Enable the profiling" OFF)
option(VIT_ENABLE_MEMORY_PROFILING "Enable the memory profiling" OFF)
if(VIT_ENABLE_PROFILING)
    message(STATUS "VIT - Profiling is enabled")

    if(VIT_ENABLE_MEMORY_PROFILING)
        message(STATUS "VIT - Memory profiling is enabled")
    else()
        message(STATUS "VIT - Memory profiling is disabled")
    endif(VIT_ENABLE_MEMORY_PROFILING)
else()
    message(STATUS "VIT - Profiling is disabled")
endif(VIT_ENABLE_PROFILING)

option(VIT_COMPILE_MONOLITHIC "Compile the engine as a monolithic" OFF)
if(VIT_COMPILE_MONOLITHIC)
    set(VIT_LIBRARY_TYPE STATIC)
    message(STATUS "VIT - Compiling as monolithic")
else()
    set(VIT_LIBRARY_TYPE SHARED)
    message(STATUS "VIT - Compiling as modular")
endif(VIT_COMPILE_MONOLITHIC)

add_subdirectory(External/)
add_subdirectory(Engine/)
add_subdirectory(Editor/)
add_subdirectory(RHI/Vulkan/)
